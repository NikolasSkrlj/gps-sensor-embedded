
URS-GPS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00800060  00000e72  00000f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000015f  00800140  00800140  00000fe6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fe6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001488  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000907  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a61  00000000  00000000  00002f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  00003988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000561  00000000  00000000  00003d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a84  00000000  00000000  00004289  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004d0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_1>
   8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_2>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	63 64       	ori	r22, 0x43	; 67
  56:	69 6e       	ori	r22, 0xE9	; 233
  58:	6f 70       	andi	r22, 0x0F	; 15
  5a:	73 75       	andi	r23, 0x53	; 83
  5c:	78 58       	subi	r23, 0x88	; 136
  5e:	5b 00       	.word	0x005b	; ????

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d4 e0       	ldi	r29, 0x04	; 4
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	11 e0       	ldi	r17, 0x01	; 1
  6e:	a0 e6       	ldi	r26, 0x60	; 96
  70:	b0 e0       	ldi	r27, 0x00	; 0
  72:	e2 e7       	ldi	r30, 0x72	; 114
  74:	fe e0       	ldi	r31, 0x0E	; 14
  76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
  78:	05 90       	lpm	r0, Z+
  7a:	0d 92       	st	X+, r0
  7c:	a0 34       	cpi	r26, 0x40	; 64
  7e:	b1 07       	cpc	r27, r17
  80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>

00000082 <__do_clear_bss>:
  82:	22 e0       	ldi	r18, 0x02	; 2
  84:	a0 e4       	ldi	r26, 0x40	; 64
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	af 39       	cpi	r26, 0x9F	; 159
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <main>
  96:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  9e:	97 9a       	sbi	0x12, 7	; 18
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <toggle_e+0x4>
  a2:	97 98       	cbi	0x12, 7	; 18
  a4:	08 95       	ret

000000a6 <lcd_write>:
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	d8 2f       	mov	r29, r24
  ac:	66 23       	and	r22, r22
  ae:	11 f0       	breq	.+4      	; 0xb4 <lcd_write+0xe>
  b0:	95 9a       	sbi	0x12, 5	; 18
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <lcd_write+0x10>
  b4:	95 98       	cbi	0x12, 5	; 18
  b6:	96 98       	cbi	0x12, 6	; 18
  b8:	8a b3       	in	r24, 0x1a	; 26
  ba:	8f 60       	ori	r24, 0x0F	; 15
  bc:	8a bb       	out	0x1a, r24	; 26
  be:	cb b3       	in	r28, 0x1b	; 27
  c0:	c0 7f       	andi	r28, 0xF0	; 240
  c2:	8d 2f       	mov	r24, r29
  c4:	82 95       	swap	r24
  c6:	8f 70       	andi	r24, 0x0F	; 15
  c8:	8c 2b       	or	r24, r28
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	0e 94 4f 00 	call	0x9e	; 0x9e <toggle_e>
  d0:	df 70       	andi	r29, 0x0F	; 15
  d2:	dc 2b       	or	r29, r28
  d4:	db bb       	out	0x1b, r29	; 27
  d6:	0e 94 4f 00 	call	0x9e	; 0x9e <toggle_e>
  da:	cf 60       	ori	r28, 0x0F	; 15
  dc:	cb bb       	out	0x1b, r28	; 27
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <lcd_read>:
  e4:	88 23       	and	r24, r24
  e6:	11 f0       	breq	.+4      	; 0xec <lcd_read+0x8>
  e8:	95 9a       	sbi	0x12, 5	; 18
  ea:	01 c0       	rjmp	.+2      	; 0xee <lcd_read+0xa>
  ec:	95 98       	cbi	0x12, 5	; 18
  ee:	96 9a       	sbi	0x12, 6	; 18
  f0:	8a b3       	in	r24, 0x1a	; 26
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	8a bb       	out	0x1a, r24	; 26
  f6:	97 9a       	sbi	0x12, 7	; 18
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_read+0x16>
  fa:	99 b3       	in	r25, 0x19	; 25
  fc:	97 98       	cbi	0x12, 7	; 18
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_read+0x1c>
 100:	97 9a       	sbi	0x12, 7	; 18
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_read+0x20>
 104:	29 b3       	in	r18, 0x19	; 25
 106:	2f 70       	andi	r18, 0x0F	; 15
 108:	89 2f       	mov	r24, r25
 10a:	82 95       	swap	r24
 10c:	80 7f       	andi	r24, 0xF0	; 240
 10e:	97 98       	cbi	0x12, 7	; 18
 110:	82 2b       	or	r24, r18
 112:	08 95       	ret

00000114 <lcd_waitbusy>:
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_read>
 11a:	88 23       	and	r24, r24
 11c:	dc f3       	brlt	.-10     	; 0x114 <lcd_waitbusy>
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_waitbusy+0xe>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_read>
 12c:	08 95       	ret

0000012e <lcd_command>:
 12e:	cf 93       	push	r28
 130:	c8 2f       	mov	r28, r24
 132:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_waitbusy>
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <lcd_gotoxy>:
 142:	61 11       	cpse	r22, r1
 144:	04 c0       	rjmp	.+8      	; 0x14e <lcd_gotoxy+0xc>
 146:	80 58       	subi	r24, 0x80	; 128
 148:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_command>
 14c:	08 95       	ret
 14e:	80 54       	subi	r24, 0x40	; 64
 150:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_command>
 154:	08 95       	ret

00000156 <lcd_clrscr>:
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_command>
 15c:	08 95       	ret

0000015e <lcd_putc>:
 15e:	cf 93       	push	r28
 160:	c8 2f       	mov	r28, r24
 162:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_waitbusy>
 166:	ca 30       	cpi	r28, 0x0A	; 10
 168:	49 f4       	brne	.+18     	; 0x17c <lcd_putc+0x1e>
 16a:	80 34       	cpi	r24, 0x40	; 64
 16c:	10 f0       	brcs	.+4      	; 0x172 <lcd_putc+0x14>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	01 c0       	rjmp	.+2      	; 0x174 <lcd_putc+0x16>
 172:	80 e4       	ldi	r24, 0x40	; 64
 174:	80 58       	subi	r24, 0x80	; 128
 176:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_command>
 17a:	04 c0       	rjmp	.+8      	; 0x184 <lcd_putc+0x26>
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	8c 2f       	mov	r24, r28
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <lcd_puts>:
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ec 01       	movw	r28, r24
 18e:	21 96       	adiw	r28, 0x01	; 1
 190:	fc 01       	movw	r30, r24
 192:	80 81       	ld	r24, Z
 194:	88 23       	and	r24, r24
 196:	29 f0       	breq	.+10     	; 0x1a2 <lcd_puts+0x1a>
 198:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putc>
 19c:	89 91       	ld	r24, Y+
 19e:	81 11       	cpse	r24, r1
 1a0:	fb cf       	rjmp	.-10     	; 0x198 <lcd_puts+0x10>
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 1b0:	8a b3       	in	r24, 0x1a	; 26
 1b2:	8f 60       	ori	r24, 0x0F	; 15
 1b4:	8a bb       	out	0x1a, r24	; 26
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1b6:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1b8:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1ba:	8f 9a       	sbi	0x11, 7	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	9d e7       	ldi	r25, 0x7D	; 125
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_init+0x18>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1c4:	d9 9a       	sbi	0x1b, 1	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1c6:	d8 9a       	sbi	0x1b, 0	; 27
    lcd_e_toggle();
 1c8:	0e 94 4f 00 	call	0x9e	; 0x9e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	97 e2       	ldi	r25, 0x27	; 39
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x28>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1d4:	0e 94 4f 00 	call	0x9e	; 0x9e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d8:	c0 e8       	ldi	r28, 0x80	; 128
 1da:	d0 e0       	ldi	r29, 0x00	; 0
 1dc:	ce 01       	movw	r24, r28
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init+0x36>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1e2:	0e 94 4f 00 	call	0x9e	; 0x9e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e6:	ce 01       	movw	r24, r28
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_init+0x40>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1ec:	d8 98       	cbi	0x1b, 0	; 27
    lcd_e_toggle();
 1ee:	0e 94 4f 00 	call	0x9e	; 0x9e <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1f2:	21 97       	sbiw	r28, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_init+0x4a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1f6:	88 e2       	ldi	r24, 0x28	; 40
 1f8:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1fc:	88 e0       	ldi	r24, 0x08	; 8
 1fe:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 202:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 206:	86 e0       	ldi	r24, 0x06	; 6
 208:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 20c:	81 2f       	mov	r24, r17
 20e:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_command>

}/* lcd_init */
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	08 95       	ret

0000021a <usart_init>:
char ns[2];		
char ew[2];		
char a[15];		

void usart_init(){		// funkcija za inicijalizaciju USART protokola
	UCSRB =  (1 << RXEN) | (1 << TXEN);	
 21a:	88 e1       	ldi	r24, 0x18	; 24
 21c:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); 
 21e:	80 b5       	in	r24, 0x20	; 32
 220:	86 68       	ori	r24, 0x86	; 134
 222:	80 bd       	out	0x20, r24	; 32
	UBRRL = 51;		
 224:	83 e3       	ldi	r24, 0x33	; 51
 226:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;		
 228:	10 bc       	out	0x20, r1	; 32
 22a:	08 95       	ret

0000022c <usart_getch>:
}					
unsigned int usart_getch(){	
	while (!(UCSRA & (1 << RXC)));	
 22c:	5f 9b       	sbis	0x0b, 7	; 11
 22e:	fe cf       	rjmp	.-4      	; 0x22c <usart_getch>
	return(UDR);	
 230:	8c b1       	in	r24, 0x0c	; 12
}
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	08 95       	ret

00000236 <db>:
void db(){	//funkcija za non blocking debounce
	GICR &= ~_BV(INT0);
 236:	8b b7       	in	r24, 0x3b	; 59
 238:	8f 7b       	andi	r24, 0xBF	; 191
 23a:	8b bf       	out	0x3b, r24	; 59
	GICR &= ~_BV(INT1); 
 23c:	8b b7       	in	r24, 0x3b	; 59
 23e:	8f 77       	andi	r24, 0x7F	; 127
 240:	8b bf       	out	0x3b, r24	; 59
	sei();
 242:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	81 ee       	ldi	r24, 0xE1	; 225
 248:	94 e0       	ldi	r25, 0x04	; 4
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <db+0x14>
 252:	00 c0       	rjmp	.+0      	; 0x254 <db+0x1e>
 254:	00 00       	nop
	_delay_ms(200);
	GIFR = _BV(INTF0)| _BV(INTF1);
 256:	80 ec       	ldi	r24, 0xC0	; 192
 258:	8a bf       	out	0x3a, r24	; 58
	GICR |= _BV(INT0);
 25a:	8b b7       	in	r24, 0x3b	; 59
 25c:	80 64       	ori	r24, 0x40	; 64
 25e:	8b bf       	out	0x3b, r24	; 59
	GICR |= _BV(INT1);
 260:	8b b7       	in	r24, 0x3b	; 59
 262:	80 68       	ori	r24, 0x80	; 128
 264:	8b bf       	out	0x3b, r24	; 59
	cli();
 266:	f8 94       	cli
 268:	08 95       	ret

0000026a <__vector_1>:
}

ISR(INT0_vect){	//INT0 promjena prikaza unaprijed
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	2f 93       	push	r18
 276:	3f 93       	push	r19
 278:	4f 93       	push	r20
 27a:	5f 93       	push	r21
 27c:	6f 93       	push	r22
 27e:	7f 93       	push	r23
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	af 93       	push	r26
 286:	bf 93       	push	r27
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
	if(ready == 1){
 28c:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <ready>
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	59 f4       	brne	.+22     	; 0x2aa <__vector_1+0x40>
		flag++;
 294:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 298:	8f 5f       	subi	r24, 0xFF	; 255
		if(flag > 6){
 29a:	87 30       	cpi	r24, 0x07	; 7
 29c:	18 f4       	brcc	.+6      	; 0x2a4 <__vector_1+0x3a>
	cli();
}

ISR(INT0_vect){	//INT0 promjena prikaza unaprijed
	if(ready == 1){
		flag++;
 29e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <__vector_1+0x40>
		if(flag > 6){
			flag = 1;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		}	
	}
	db();
 2aa:	0e 94 1b 01 	call	0x236	; 0x236 <db>
}
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	7f 91       	pop	r23
 2bc:	6f 91       	pop	r22
 2be:	5f 91       	pop	r21
 2c0:	4f 91       	pop	r20
 2c2:	3f 91       	pop	r19
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <__vector_2>:

ISR(INT1_vect){	//INT1 promjena prikaza unatrag
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
	if(ready == 1){
 2f2:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <ready>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	51 f4       	brne	.+20     	; 0x30e <__vector_2+0x3e>
		flag--;
 2fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 2fe:	81 50       	subi	r24, 0x01	; 1
		if(flag < 1){
 300:	19 f0       	breq	.+6      	; 0x308 <__vector_2+0x38>
	db();
}

ISR(INT1_vect){	//INT1 promjena prikaza unatrag
	if(ready == 1){
		flag--;
 302:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 306:	03 c0       	rjmp	.+6      	; 0x30e <__vector_2+0x3e>
		if(flag < 1){
			flag = 6;
 308:	86 e0       	ldi	r24, 0x06	; 6
 30a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		}
	}
	db();
 30e:	0e 94 1b 01 	call	0x236	; 0x236 <db>
}
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <getstuff>:

void getstuff(){	//funkcija koja sprema sve charove stringa u buffer
	value = usart_getch();	
 334:	0e 94 16 01 	call	0x22c	; 0x22c <usart_getch>
 338:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <value>
	while(value != '\n'){	
 33c:	8a 30       	cpi	r24, 0x0A	; 10
 33e:	a1 f0       	breq	.+40     	; 0x368 <getstuff+0x34>
		msg[count] = value;
 340:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <count>
 344:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <count+0x1>
 348:	f9 01       	movw	r30, r18
 34a:	eb 5b       	subi	r30, 0xBB	; 187
 34c:	fe 4f       	sbci	r31, 0xFE	; 254
 34e:	80 83       	st	Z, r24
		count++;
 350:	2f 5f       	subi	r18, 0xFF	; 255
 352:	3f 4f       	sbci	r19, 0xFF	; 255
 354:	30 93 44 01 	sts	0x0144, r19	; 0x800144 <count+0x1>
 358:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <count>
		value = usart_getch();
 35c:	0e 94 16 01 	call	0x22c	; 0x22c <usart_getch>
 360:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <value>
	db();
}

void getstuff(){	//funkcija koja sprema sve charove stringa u buffer
	value = usart_getch();	
	while(value != '\n'){	
 364:	8a 30       	cpi	r24, 0x0A	; 10
 366:	61 f7       	brne	.-40     	; 0x340 <getstuff+0xc>
		msg[count] = value;
		count++;
		value = usart_getch();
	}
	count = 0;	
 368:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <count+0x1>
 36c:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <count>
 370:	08 95       	ret

00000372 <getmessage>:
}

void getmessage(){	// funkcija koja parsa buffer i sprema u varijable
	if(strstr(msg,"$GPGGA") != NULL){	 
 372:	61 e6       	ldi	r22, 0x61	; 97
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	85 e4       	ldi	r24, 0x45	; 69
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	0e 94 b2 03 	call	0x764	; 0x764 <strstr>
 37e:	89 2b       	or	r24, r25
 380:	d9 f1       	breq	.+118    	; 0x3f8 <getmessage+0x86>
		sscanf(msg, "$GPGGA,%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,]", time, latitude, ns, longitude, ew, lock, sats, a, alt, a, a);
 382:	80 e9       	ldi	r24, 0x90	; 144
 384:	92 e0       	ldi	r25, 0x02	; 2
 386:	9f 93       	push	r25
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
 38c:	8f 93       	push	r24
 38e:	2a e4       	ldi	r18, 0x4A	; 74
 390:	32 e0       	ldi	r19, 0x02	; 2
 392:	3f 93       	push	r19
 394:	2f 93       	push	r18
 396:	9f 93       	push	r25
 398:	8f 93       	push	r24
 39a:	88 e7       	ldi	r24, 0x78	; 120
 39c:	92 e0       	ldi	r25, 0x02	; 2
 39e:	9f 93       	push	r25
 3a0:	8f 93       	push	r24
 3a2:	80 e4       	ldi	r24, 0x40	; 64
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	9f 93       	push	r25
 3a8:	8f 93       	push	r24
 3aa:	88 e4       	ldi	r24, 0x48	; 72
 3ac:	92 e0       	ldi	r25, 0x02	; 2
 3ae:	9f 93       	push	r25
 3b0:	8f 93       	push	r24
 3b2:	8a e5       	ldi	r24, 0x5A	; 90
 3b4:	92 e0       	ldi	r25, 0x02	; 2
 3b6:	9f 93       	push	r25
 3b8:	8f 93       	push	r24
 3ba:	86 e4       	ldi	r24, 0x46	; 70
 3bc:	92 e0       	ldi	r25, 0x02	; 2
 3be:	9f 93       	push	r25
 3c0:	8f 93       	push	r24
 3c2:	8b e7       	ldi	r24, 0x7B	; 123
 3c4:	92 e0       	ldi	r25, 0x02	; 2
 3c6:	9f 93       	push	r25
 3c8:	8f 93       	push	r24
 3ca:	89 e6       	ldi	r24, 0x69	; 105
 3cc:	92 e0       	ldi	r25, 0x02	; 2
 3ce:	9f 93       	push	r25
 3d0:	8f 93       	push	r24
 3d2:	88 e6       	ldi	r24, 0x68	; 104
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	9f 93       	push	r25
 3d8:	8f 93       	push	r24
 3da:	85 e4       	ldi	r24, 0x45	; 69
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	9f 93       	push	r25
 3e0:	8f 93       	push	r24
 3e2:	0e 94 cc 03 	call	0x798	; 0x798 <sscanf>
 3e6:	8d b7       	in	r24, 0x3d	; 61
 3e8:	9e b7       	in	r25, 0x3e	; 62
 3ea:	4a 96       	adiw	r24, 0x1a	; 26
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	f8 94       	cli
 3f0:	9e bf       	out	0x3e, r25	; 62
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	8d bf       	out	0x3d, r24	; 61
 3f6:	08 95       	ret
	}else if(strstr(msg,"$GPRMC") != NULL){	
 3f8:	61 eb       	ldi	r22, 0xB1	; 177
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	85 e4       	ldi	r24, 0x45	; 69
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	0e 94 b2 03 	call	0x764	; 0x764 <strstr>
 404:	89 2b       	or	r24, r25
 406:	71 f1       	breq	.+92     	; 0x464 <__stack+0x5>
		sscanf(msg, "$GPRMC,%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,]", a, a, a, a, a, a, speed, angle, a, a, a);
 408:	80 e9       	ldi	r24, 0x90	; 144
 40a:	92 e0       	ldi	r25, 0x02	; 2
 40c:	9f 93       	push	r25
 40e:	8f 93       	push	r24
 410:	9f 93       	push	r25
 412:	8f 93       	push	r24
 414:	9f 93       	push	r25
 416:	8f 93       	push	r24
 418:	20 e5       	ldi	r18, 0x50	; 80
 41a:	32 e0       	ldi	r19, 0x02	; 2
 41c:	3f 93       	push	r19
 41e:	2f 93       	push	r18
 420:	2a e8       	ldi	r18, 0x8A	; 138
 422:	32 e0       	ldi	r19, 0x02	; 2
 424:	3f 93       	push	r19
 426:	2f 93       	push	r18
 428:	9f 93       	push	r25
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
 42e:	8f 93       	push	r24
 430:	9f 93       	push	r25
 432:	8f 93       	push	r24
 434:	9f 93       	push	r25
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	8f 93       	push	r24
 43c:	9f 93       	push	r25
 43e:	8f 93       	push	r24
 440:	88 eb       	ldi	r24, 0xB8	; 184
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	9f 93       	push	r25
 446:	8f 93       	push	r24
 448:	85 e4       	ldi	r24, 0x45	; 69
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	9f 93       	push	r25
 44e:	8f 93       	push	r24
 450:	0e 94 cc 03 	call	0x798	; 0x798 <sscanf>
 454:	8d b7       	in	r24, 0x3d	; 61
 456:	9e b7       	in	r25, 0x3e	; 62
 458:	4a 96       	adiw	r24, 0x1a	; 26
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	9e bf       	out	0x3e, r25	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	8d bf       	out	0x3d, r24	; 61
 464:	08 95       	ret

00000466 <check_ready>:
	}														
}

void check_ready(){	//funkcija koja pregledava je li GPS spojen
	if(strcmp(lock, "") == 0){	
 466:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
 46a:	81 11       	cpse	r24, r1
 46c:	09 c0       	rjmp	.+18     	; 0x480 <check_ready+0x1a>
		ready = 0;	
 46e:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <ready>
		lcd_clrscr();
 472:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_clrscr>
		lcd_puts("GPS nije spojen");	
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
 47e:	08 95       	ret
	}else{
		ready = 1;	
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <ready>
 486:	08 95       	ret

00000488 <print_time>:
	}	
}
void print_time(){	//funkcija koja ispisuje vrijeme
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
 490:	60 97       	sbiw	r28, 0x10	; 16
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	f8 94       	cli
 496:	de bf       	out	0x3e, r29	; 62
 498:	0f be       	out	0x3f, r0	; 63
 49a:	cd bf       	out	0x3d, r28	; 61
	char data[16];
	data[0] = time[0];
 49c:	e9 e6       	ldi	r30, 0x69	; 105
 49e:	f2 e0       	ldi	r31, 0x02	; 2
 4a0:	80 81       	ld	r24, Z
 4a2:	89 83       	std	Y+1, r24	; 0x01
	data[1] = time[1];
 4a4:	81 81       	ldd	r24, Z+1	; 0x01
 4a6:	8a 83       	std	Y+2, r24	; 0x02
	data[2] = ':';
 4a8:	8a e3       	ldi	r24, 0x3A	; 58
 4aa:	8b 83       	std	Y+3, r24	; 0x03
	data[3] = time[2];
 4ac:	92 81       	ldd	r25, Z+2	; 0x02
 4ae:	9c 83       	std	Y+4, r25	; 0x04
	data[4] = time[3];
 4b0:	93 81       	ldd	r25, Z+3	; 0x03
 4b2:	9d 83       	std	Y+5, r25	; 0x05
	data[5] = ':';
 4b4:	8e 83       	std	Y+6, r24	; 0x06
	data[6] = time[4];
 4b6:	84 81       	ldd	r24, Z+4	; 0x04
 4b8:	8f 83       	std	Y+7, r24	; 0x07
	data[7] = time[5];
 4ba:	85 81       	ldd	r24, Z+5	; 0x05
 4bc:	88 87       	std	Y+8, r24	; 0x08
	data[8] = '.';
 4be:	8e e2       	ldi	r24, 0x2E	; 46
 4c0:	89 87       	std	Y+9, r24	; 0x09
	data[9] = time[7];
 4c2:	87 81       	ldd	r24, Z+7	; 0x07
 4c4:	8a 87       	std	Y+10, r24	; 0x0a
	data[10] = time[8];
 4c6:	80 85       	ldd	r24, Z+8	; 0x08
 4c8:	8b 87       	std	Y+11, r24	; 0x0b
	data[11] = time[9];
 4ca:	81 85       	ldd	r24, Z+9	; 0x09
 4cc:	8c 87       	std	Y+12, r24	; 0x0c
	data[12] = '\0';
 4ce:	1d 86       	std	Y+13, r1	; 0x0d
	
	
	lcd_clrscr();
 4d0:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_clrscr>
	lcd_gotoxy(0,0);
 4d4:	60 e0       	ldi	r22, 0x00	; 0
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts("UTC vrijeme");
 4dc:	81 e1       	ldi	r24, 0x11	; 17
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	lcd_gotoxy(0,1);
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts(data);
 4ec:	ce 01       	movw	r24, r28
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	
}
 4f4:	60 96       	adiw	r28, 0x10	; 16
 4f6:	0f b6       	in	r0, 0x3f	; 63
 4f8:	f8 94       	cli
 4fa:	de bf       	out	0x3e, r29	; 62
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	cd bf       	out	0x3d, r28	; 61
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <print_coordinates>:
void print_coordinates(){	//funkcija koja ispisuje koordinate
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	a0 97       	sbiw	r28, 0x20	; 32
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
	char data[16];
	char data1[16];
	data[0] = latitude[0];
 51c:	eb e7       	ldi	r30, 0x7B	; 123
 51e:	f2 e0       	ldi	r31, 0x02	; 2
 520:	80 81       	ld	r24, Z
 522:	89 83       	std	Y+1, r24	; 0x01
	data[1] = latitude[1];
 524:	81 81       	ldd	r24, Z+1	; 0x01
 526:	8a 83       	std	Y+2, r24	; 0x02
	data[2] = (char)0xDF;	
 528:	1f ed       	ldi	r17, 0xDF	; 223
 52a:	1b 83       	std	Y+3, r17	; 0x03
	data[3] = latitude[2];
 52c:	82 81       	ldd	r24, Z+2	; 0x02
 52e:	8c 83       	std	Y+4, r24	; 0x04
	data[4] = latitude[3];
 530:	83 81       	ldd	r24, Z+3	; 0x03
 532:	8d 83       	std	Y+5, r24	; 0x05
	data[5] = latitude[4];
 534:	84 81       	ldd	r24, Z+4	; 0x04
 536:	8e 83       	std	Y+6, r24	; 0x06
    data[6] = latitude[5];
 538:	85 81       	ldd	r24, Z+5	; 0x05
 53a:	8f 83       	std	Y+7, r24	; 0x07
	data[7] = latitude[6];
 53c:	86 81       	ldd	r24, Z+6	; 0x06
 53e:	88 87       	std	Y+8, r24	; 0x08
	data[8] = latitude[7];
 540:	87 81       	ldd	r24, Z+7	; 0x07
 542:	89 87       	std	Y+9, r24	; 0x09
    data[9] = latitude[8];
 544:	80 85       	ldd	r24, Z+8	; 0x08
 546:	8a 87       	std	Y+10, r24	; 0x0a
	data[10] = latitude[9];
 548:	81 85       	ldd	r24, Z+9	; 0x09
 54a:	8b 87       	std	Y+11, r24	; 0x0b
	data[11] ='\0';
 54c:	1c 86       	std	Y+12, r1	; 0x0c
	lcd_clrscr();
 54e:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_clrscr>
	lcd_gotoxy(0,0);
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts(data);
 55a:	ce 01       	movw	r24, r28
 55c:	01 96       	adiw	r24, 0x01	; 1
 55e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	lcd_gotoxy(12,0);
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	8c e0       	ldi	r24, 0x0C	; 12
 566:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_putc('"');
 56a:	82 e2       	ldi	r24, 0x22	; 34
 56c:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putc>
	lcd_gotoxy(14,0);
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	8e e0       	ldi	r24, 0x0E	; 14
 574:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts(ns);	
 578:	86 e4       	ldi	r24, 0x46	; 70
 57a:	92 e0       	ldi	r25, 0x02	; 2
 57c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>

	data1[0] = longitude[1];
 580:	ea e5       	ldi	r30, 0x5A	; 90
 582:	f2 e0       	ldi	r31, 0x02	; 2
 584:	81 81       	ldd	r24, Z+1	; 0x01
 586:	89 8b       	std	Y+17, r24	; 0x11
	data1[1] = longitude[2];
 588:	82 81       	ldd	r24, Z+2	; 0x02
 58a:	8a 8b       	std	Y+18, r24	; 0x12
	data1[2] = (char)0xDF;	
 58c:	1b 8b       	std	Y+19, r17	; 0x13
	data1[3] = longitude[3];
 58e:	83 81       	ldd	r24, Z+3	; 0x03
 590:	8c 8b       	std	Y+20, r24	; 0x14
	data1[4] = longitude[4];
 592:	84 81       	ldd	r24, Z+4	; 0x04
 594:	8d 8b       	std	Y+21, r24	; 0x15
	data1[5] = longitude[5];
 596:	85 81       	ldd	r24, Z+5	; 0x05
 598:	8e 8b       	std	Y+22, r24	; 0x16
	data1[6] = longitude[6];
 59a:	86 81       	ldd	r24, Z+6	; 0x06
 59c:	8f 8b       	std	Y+23, r24	; 0x17
	data1[7] = longitude[7];
 59e:	87 81       	ldd	r24, Z+7	; 0x07
 5a0:	88 8f       	std	Y+24, r24	; 0x18
	data1[8] = longitude[8];
 5a2:	80 85       	ldd	r24, Z+8	; 0x08
 5a4:	89 8f       	std	Y+25, r24	; 0x19
	data1[9] = longitude[9];
 5a6:	81 85       	ldd	r24, Z+9	; 0x09
 5a8:	8a 8f       	std	Y+26, r24	; 0x1a
	data1[10] = longitude[10];
 5aa:	82 85       	ldd	r24, Z+10	; 0x0a
 5ac:	8b 8f       	std	Y+27, r24	; 0x1b
	data1[11] ='\0';
 5ae:	1c 8e       	std	Y+28, r1	; 0x1c
	lcd_gotoxy(0,1);
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts(data1);
 5b8:	ce 01       	movw	r24, r28
 5ba:	41 96       	adiw	r24, 0x11	; 17
 5bc:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	lcd_gotoxy(12,1);
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	8c e0       	ldi	r24, 0x0C	; 12
 5c4:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_putc('"');
 5c8:	82 e2       	ldi	r24, 0x22	; 34
 5ca:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putc>
	lcd_gotoxy(14,1);
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	8e e0       	ldi	r24, 0x0E	; 14
 5d2:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts(ew);	
 5d6:	88 e4       	ldi	r24, 0x48	; 72
 5d8:	92 e0       	ldi	r25, 0x02	; 2
 5da:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
}
 5de:	a0 96       	adiw	r28, 0x20	; 32
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	1f 91       	pop	r17
 5f0:	08 95       	ret

000005f2 <print_alt>:

void print_alt(){	//funkcija koja ispisuje nadmorsku visinu
	lcd_clrscr();
 5f2:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_clrscr>
	lcd_gotoxy(0,0);
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts("Visina");
 5fe:	8d e1       	ldi	r24, 0x1D	; 29
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	lcd_gotoxy(0,1);
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts(alt);
 60e:	8a e4       	ldi	r24, 0x4A	; 74
 610:	92 e0       	ldi	r25, 0x02	; 2
 612:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	lcd_gotoxy(15,1);
 616:	61 e0       	ldi	r22, 0x01	; 1
 618:	8f e0       	ldi	r24, 0x0F	; 15
 61a:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts("M");
 61e:	84 e2       	ldi	r24, 0x24	; 36
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
 626:	08 95       	ret

00000628 <print_fix>:
}

void print_fix(){	//funkcija koja ispisuje je li spojen na GPS, i koliko je GPS-a trenutno spojeno
	lcd_clrscr();
 628:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_clrscr>
	lcd_gotoxy(0,0);
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts("SVs");
 634:	86 e2       	ldi	r24, 0x26	; 38
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	lcd_gotoxy(5,0);
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	85 e0       	ldi	r24, 0x05	; 5
 640:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts(sats);	
 644:	88 e7       	ldi	r24, 0x78	; 120
 646:	92 e0       	ldi	r25, 0x02	; 2
 648:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	lcd_gotoxy(0,1);
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts("FIX");
 654:	8a e2       	ldi	r24, 0x2A	; 42
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	lcd_gotoxy(5,1);
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	85 e0       	ldi	r24, 0x05	; 5
 660:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts(lock);	
 664:	80 e4       	ldi	r24, 0x40	; 64
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
 66c:	08 95       	ret

0000066e <print_speed>:
}

void print_speed(){	//funkcija koja ispisuje trenutnu brzinu
	lcd_clrscr();
 66e:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_clrscr>
	lcd_gotoxy(0,0);
 672:	60 e0       	ldi	r22, 0x00	; 0
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts("Brzina");
 67a:	8e e2       	ldi	r24, 0x2E	; 46
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	lcd_gotoxy(0,1);
 682:	61 e0       	ldi	r22, 0x01	; 1
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts(speed);
 68a:	8a e8       	ldi	r24, 0x8A	; 138
 68c:	92 e0       	ldi	r25, 0x02	; 2
 68e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	lcd_gotoxy(11,1);
 692:	61 e0       	ldi	r22, 0x01	; 1
 694:	8b e0       	ldi	r24, 0x0B	; 11
 696:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts("knots");
 69a:	85 e3       	ldi	r24, 0x35	; 53
 69c:	91 e0       	ldi	r25, 0x01	; 1
 69e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
 6a2:	08 95       	ret

000006a4 <print_angle>:
}

void print_angle(){	//funkcija koja ispisuje azimut kuta
	lcd_clrscr();
 6a4:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_clrscr>
	lcd_gotoxy(0,0);
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts("Kut");
 6b0:	8b e3       	ldi	r24, 0x3B	; 59
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	lcd_gotoxy(0,1);
 6b8:	61 e0       	ldi	r22, 0x01	; 1
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts(angle);
 6c0:	80 e5       	ldi	r24, 0x50	; 80
 6c2:	92 e0       	ldi	r25, 0x02	; 2
 6c4:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_puts>
	lcd_gotoxy(15,1);
 6c8:	61 e0       	ldi	r22, 0x01	; 1
 6ca:	8f e0       	ldi	r24, 0x0F	; 15
 6cc:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_putc((char)0xDF);	
 6d0:	8f ed       	ldi	r24, 0xDF	; 223
 6d2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putc>
 6d6:	08 95       	ret

000006d8 <main>:
}

int main(void)
{	PORTB = 0x0f;
 6d8:	8f e0       	ldi	r24, 0x0F	; 15
 6da:	88 bb       	out	0x18, r24	; 24
	DDRB = 0x00;
 6dc:	17 ba       	out	0x17, r1	; 23
	DDRD = _BV(4);
 6de:	80 e1       	ldi	r24, 0x10	; 16
 6e0:	81 bb       	out	0x11, r24	; 17

	TCCR1A = _BV(COM1B1) | _BV(WGM10);
 6e2:	81 e2       	ldi	r24, 0x21	; 33
 6e4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12) | _BV(CS11);
 6e6:	8a e0       	ldi	r24, 0x0A	; 10
 6e8:	8e bd       	out	0x2e, r24	; 46
	OCR1B = 60;
 6ea:	2c e3       	ldi	r18, 0x3C	; 60
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	39 bd       	out	0x29, r19	; 41
 6f0:	28 bd       	out	0x28, r18	; 40
	MCUCR = _BV(ISC01)|_BV(ISC11);
 6f2:	85 bf       	out	0x35, r24	; 53
	GICR = _BV(INT0)| _BV(INT1);
 6f4:	80 ec       	ldi	r24, 0xC0	; 192
 6f6:	8b bf       	out	0x3b, r24	; 59
		
	lcd_init(LCD_DISP_ON);
 6f8:	8c e0       	ldi	r24, 0x0C	; 12
 6fa:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_init>
	lcd_clrscr();
 6fe:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_clrscr>
	lcd_gotoxy(0,0);
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	
	usart_init();	//inicjalizacija USART protokola
 70a:	0e 94 0d 01 	call	0x21a	; 0x21a <usart_init>
	sei();
 70e:	78 94       	sei
	   
    while (1) 
    {
		getstuff();                                  
 710:	0e 94 9a 01 	call	0x334	; 0x334 <getstuff>
		getmessage();
 714:	0e 94 b9 01 	call	0x372	; 0x372 <getmessage>
		check_ready();
 718:	0e 94 33 02 	call	0x466	; 0x466 <check_ready>
		if(ready == 1){
 71c:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <ready>
 720:	81 30       	cpi	r24, 0x01	; 1
 722:	b1 f7       	brne	.-20     	; 0x710 <main+0x38>
			if(flag == 1){
 724:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 728:	81 30       	cpi	r24, 0x01	; 1
 72a:	19 f4       	brne	.+6      	; 0x732 <main+0x5a>
				print_time();
 72c:	0e 94 44 02 	call	0x488	; 0x488 <print_time>
 730:	ef cf       	rjmp	.-34     	; 0x710 <main+0x38>
			}else if(flag == 2){
 732:	82 30       	cpi	r24, 0x02	; 2
 734:	19 f4       	brne	.+6      	; 0x73c <main+0x64>
				print_coordinates();
 736:	0e 94 83 02 	call	0x506	; 0x506 <print_coordinates>
 73a:	ea cf       	rjmp	.-44     	; 0x710 <main+0x38>
			}else if(flag == 3){
 73c:	83 30       	cpi	r24, 0x03	; 3
 73e:	19 f4       	brne	.+6      	; 0x746 <main+0x6e>
				print_alt();
 740:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <print_alt>
 744:	e5 cf       	rjmp	.-54     	; 0x710 <main+0x38>
			}else if(flag == 4){
 746:	84 30       	cpi	r24, 0x04	; 4
 748:	19 f4       	brne	.+6      	; 0x750 <main+0x78>
				print_speed();
 74a:	0e 94 37 03 	call	0x66e	; 0x66e <print_speed>
 74e:	e0 cf       	rjmp	.-64     	; 0x710 <main+0x38>
			}else if(flag == 5){
 750:	85 30       	cpi	r24, 0x05	; 5
 752:	19 f4       	brne	.+6      	; 0x75a <main+0x82>
				print_angle();
 754:	0e 94 52 03 	call	0x6a4	; 0x6a4 <print_angle>
 758:	db cf       	rjmp	.-74     	; 0x710 <main+0x38>
			}else if(flag == 6){
 75a:	86 30       	cpi	r24, 0x06	; 6
 75c:	c9 f6       	brne	.-78     	; 0x710 <main+0x38>
				print_fix();
 75e:	0e 94 14 03 	call	0x628	; 0x628 <print_fix>
 762:	d6 cf       	rjmp	.-84     	; 0x710 <main+0x38>

00000764 <strstr>:
 764:	fb 01       	movw	r30, r22
 766:	51 91       	ld	r21, Z+
 768:	55 23       	and	r21, r21
 76a:	a9 f0       	breq	.+42     	; 0x796 <strstr+0x32>
 76c:	bf 01       	movw	r22, r30
 76e:	dc 01       	movw	r26, r24
 770:	4d 91       	ld	r20, X+
 772:	45 17       	cp	r20, r21
 774:	41 11       	cpse	r20, r1
 776:	e1 f7       	brne	.-8      	; 0x770 <strstr+0xc>
 778:	59 f4       	brne	.+22     	; 0x790 <strstr+0x2c>
 77a:	cd 01       	movw	r24, r26
 77c:	01 90       	ld	r0, Z+
 77e:	00 20       	and	r0, r0
 780:	49 f0       	breq	.+18     	; 0x794 <strstr+0x30>
 782:	4d 91       	ld	r20, X+
 784:	40 15       	cp	r20, r0
 786:	41 11       	cpse	r20, r1
 788:	c9 f3       	breq	.-14     	; 0x77c <strstr+0x18>
 78a:	fb 01       	movw	r30, r22
 78c:	41 11       	cpse	r20, r1
 78e:	ef cf       	rjmp	.-34     	; 0x76e <strstr+0xa>
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	01 97       	sbiw	r24, 0x01	; 1
 796:	08 95       	ret

00000798 <sscanf>:
 798:	ae e0       	ldi	r26, 0x0E	; 14
 79a:	b0 e0       	ldi	r27, 0x00	; 0
 79c:	e2 ed       	ldi	r30, 0xD2	; 210
 79e:	f3 e0       	ldi	r31, 0x03	; 3
 7a0:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__prologue_saves__+0x20>
 7a4:	85 e0       	ldi	r24, 0x05	; 5
 7a6:	8c 83       	std	Y+4, r24	; 0x04
 7a8:	8b 89       	ldd	r24, Y+19	; 0x13
 7aa:	9c 89       	ldd	r25, Y+20	; 0x14
 7ac:	9a 83       	std	Y+2, r25	; 0x02
 7ae:	89 83       	std	Y+1, r24	; 0x01
 7b0:	ae 01       	movw	r20, r28
 7b2:	49 5e       	subi	r20, 0xE9	; 233
 7b4:	5f 4f       	sbci	r21, 0xFF	; 255
 7b6:	6d 89       	ldd	r22, Y+21	; 0x15
 7b8:	7e 89       	ldd	r23, Y+22	; 0x16
 7ba:	ce 01       	movw	r24, r28
 7bc:	01 96       	adiw	r24, 0x01	; 1
 7be:	0e 94 81 05 	call	0xb02	; 0xb02 <vfscanf>
 7c2:	2e 96       	adiw	r28, 0x0e	; 14
 7c4:	e2 e0       	ldi	r30, 0x02	; 2
 7c6:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__epilogue_restores__+0x20>

000007ca <putval>:
 7ca:	20 fd       	sbrc	r18, 0
 7cc:	09 c0       	rjmp	.+18     	; 0x7e0 <putval+0x16>
 7ce:	fc 01       	movw	r30, r24
 7d0:	23 fd       	sbrc	r18, 3
 7d2:	05 c0       	rjmp	.+10     	; 0x7de <putval+0x14>
 7d4:	22 ff       	sbrs	r18, 2
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <putval+0x12>
 7d8:	73 83       	std	Z+3, r23	; 0x03
 7da:	62 83       	std	Z+2, r22	; 0x02
 7dc:	51 83       	std	Z+1, r21	; 0x01
 7de:	40 83       	st	Z, r20
 7e0:	08 95       	ret

000007e2 <mulacc>:
 7e2:	44 fd       	sbrc	r20, 4
 7e4:	17 c0       	rjmp	.+46     	; 0x814 <mulacc+0x32>
 7e6:	46 fd       	sbrc	r20, 6
 7e8:	17 c0       	rjmp	.+46     	; 0x818 <mulacc+0x36>
 7ea:	ab 01       	movw	r20, r22
 7ec:	bc 01       	movw	r22, r24
 7ee:	da 01       	movw	r26, r20
 7f0:	fb 01       	movw	r30, r22
 7f2:	aa 0f       	add	r26, r26
 7f4:	bb 1f       	adc	r27, r27
 7f6:	ee 1f       	adc	r30, r30
 7f8:	ff 1f       	adc	r31, r31
 7fa:	10 94       	com	r1
 7fc:	d1 f7       	brne	.-12     	; 0x7f2 <mulacc+0x10>
 7fe:	4a 0f       	add	r20, r26
 800:	5b 1f       	adc	r21, r27
 802:	6e 1f       	adc	r22, r30
 804:	7f 1f       	adc	r23, r31
 806:	cb 01       	movw	r24, r22
 808:	ba 01       	movw	r22, r20
 80a:	66 0f       	add	r22, r22
 80c:	77 1f       	adc	r23, r23
 80e:	88 1f       	adc	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	09 c0       	rjmp	.+18     	; 0x826 <mulacc+0x44>
 814:	33 e0       	ldi	r19, 0x03	; 3
 816:	01 c0       	rjmp	.+2      	; 0x81a <mulacc+0x38>
 818:	34 e0       	ldi	r19, 0x04	; 4
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	31 50       	subi	r19, 0x01	; 1
 824:	d1 f7       	brne	.-12     	; 0x81a <mulacc+0x38>
 826:	62 0f       	add	r22, r18
 828:	71 1d       	adc	r23, r1
 82a:	81 1d       	adc	r24, r1
 82c:	91 1d       	adc	r25, r1
 82e:	08 95       	ret

00000830 <skip_spaces>:
 830:	0f 93       	push	r16
 832:	1f 93       	push	r17
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	8c 01       	movw	r16, r24
 83a:	c8 01       	movw	r24, r16
 83c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fgetc>
 840:	ec 01       	movw	r28, r24
 842:	97 fd       	sbrc	r25, 7
 844:	08 c0       	rjmp	.+16     	; 0x856 <skip_spaces+0x26>
 846:	0e 94 92 06 	call	0xd24	; 0xd24 <isspace>
 84a:	89 2b       	or	r24, r25
 84c:	b1 f7       	brne	.-20     	; 0x83a <skip_spaces+0xa>
 84e:	b8 01       	movw	r22, r16
 850:	ce 01       	movw	r24, r28
 852:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <ungetc>
 856:	ce 01       	movw	r24, r28
 858:	df 91       	pop	r29
 85a:	cf 91       	pop	r28
 85c:	1f 91       	pop	r17
 85e:	0f 91       	pop	r16
 860:	08 95       	ret

00000862 <conv_int>:
 862:	8f 92       	push	r8
 864:	9f 92       	push	r9
 866:	af 92       	push	r10
 868:	bf 92       	push	r11
 86a:	ef 92       	push	r14
 86c:	ff 92       	push	r15
 86e:	0f 93       	push	r16
 870:	1f 93       	push	r17
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	8c 01       	movw	r16, r24
 878:	d6 2f       	mov	r29, r22
 87a:	7a 01       	movw	r14, r20
 87c:	b2 2e       	mov	r11, r18
 87e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fgetc>
 882:	9c 01       	movw	r18, r24
 884:	33 27       	eor	r19, r19
 886:	2b 32       	cpi	r18, 0x2B	; 43
 888:	31 05       	cpc	r19, r1
 88a:	31 f0       	breq	.+12     	; 0x898 <conv_int+0x36>
 88c:	2d 32       	cpi	r18, 0x2D	; 45
 88e:	31 05       	cpc	r19, r1
 890:	61 f4       	brne	.+24     	; 0x8aa <conv_int+0x48>
 892:	8b 2d       	mov	r24, r11
 894:	80 68       	ori	r24, 0x80	; 128
 896:	b8 2e       	mov	r11, r24
 898:	d1 50       	subi	r29, 0x01	; 1
 89a:	11 f4       	brne	.+4      	; 0x8a0 <conv_int+0x3e>
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	68 c0       	rjmp	.+208    	; 0x970 <conv_int+0x10e>
 8a0:	c8 01       	movw	r24, r16
 8a2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fgetc>
 8a6:	97 fd       	sbrc	r25, 7
 8a8:	f9 cf       	rjmp	.-14     	; 0x89c <conv_int+0x3a>
 8aa:	cb 2d       	mov	r28, r11
 8ac:	cd 7f       	andi	r28, 0xFD	; 253
 8ae:	2b 2d       	mov	r18, r11
 8b0:	20 73       	andi	r18, 0x30	; 48
 8b2:	09 f5       	brne	.+66     	; 0x8f6 <conv_int+0x94>
 8b4:	80 33       	cpi	r24, 0x30	; 48
 8b6:	f9 f4       	brne	.+62     	; 0x8f6 <conv_int+0x94>
 8b8:	aa 24       	eor	r10, r10
 8ba:	aa 94       	dec	r10
 8bc:	ad 0e       	add	r10, r29
 8be:	09 f4       	brne	.+2      	; 0x8c2 <conv_int+0x60>
 8c0:	43 c0       	rjmp	.+134    	; 0x948 <conv_int+0xe6>
 8c2:	c8 01       	movw	r24, r16
 8c4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fgetc>
 8c8:	97 fd       	sbrc	r25, 7
 8ca:	3e c0       	rjmp	.+124    	; 0x948 <conv_int+0xe6>
 8cc:	9c 01       	movw	r18, r24
 8ce:	2f 7d       	andi	r18, 0xDF	; 223
 8d0:	33 27       	eor	r19, r19
 8d2:	28 35       	cpi	r18, 0x58	; 88
 8d4:	31 05       	cpc	r19, r1
 8d6:	49 f4       	brne	.+18     	; 0x8ea <conv_int+0x88>
 8d8:	c2 64       	ori	r28, 0x42	; 66
 8da:	d2 50       	subi	r29, 0x02	; 2
 8dc:	a9 f1       	breq	.+106    	; 0x948 <conv_int+0xe6>
 8de:	c8 01       	movw	r24, r16
 8e0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fgetc>
 8e4:	97 ff       	sbrs	r25, 7
 8e6:	07 c0       	rjmp	.+14     	; 0x8f6 <conv_int+0x94>
 8e8:	2f c0       	rjmp	.+94     	; 0x948 <conv_int+0xe6>
 8ea:	b6 fe       	sbrs	r11, 6
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <conv_int+0x90>
 8ee:	c2 60       	ori	r28, 0x02	; 2
 8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <conv_int+0x92>
 8f2:	c2 61       	ori	r28, 0x12	; 18
 8f4:	da 2d       	mov	r29, r10
 8f6:	81 2c       	mov	r8, r1
 8f8:	91 2c       	mov	r9, r1
 8fa:	54 01       	movw	r10, r8
 8fc:	20 ed       	ldi	r18, 0xD0	; 208
 8fe:	28 0f       	add	r18, r24
 900:	28 30       	cpi	r18, 0x08	; 8
 902:	80 f0       	brcs	.+32     	; 0x924 <conv_int+0xc2>
 904:	c4 ff       	sbrs	r28, 4
 906:	04 c0       	rjmp	.+8      	; 0x910 <conv_int+0xae>
 908:	b8 01       	movw	r22, r16
 90a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <ungetc>
 90e:	19 c0       	rjmp	.+50     	; 0x942 <conv_int+0xe0>
 910:	2a 30       	cpi	r18, 0x0A	; 10
 912:	40 f0       	brcs	.+16     	; 0x924 <conv_int+0xc2>
 914:	c6 ff       	sbrs	r28, 6
 916:	f8 cf       	rjmp	.-16     	; 0x908 <conv_int+0xa6>
 918:	2f 7d       	andi	r18, 0xDF	; 223
 91a:	3f ee       	ldi	r19, 0xEF	; 239
 91c:	32 0f       	add	r19, r18
 91e:	36 30       	cpi	r19, 0x06	; 6
 920:	98 f7       	brcc	.-26     	; 0x908 <conv_int+0xa6>
 922:	27 50       	subi	r18, 0x07	; 7
 924:	4c 2f       	mov	r20, r28
 926:	c5 01       	movw	r24, r10
 928:	b4 01       	movw	r22, r8
 92a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <mulacc>
 92e:	4b 01       	movw	r8, r22
 930:	5c 01       	movw	r10, r24
 932:	c2 60       	ori	r28, 0x02	; 2
 934:	d1 50       	subi	r29, 0x01	; 1
 936:	59 f0       	breq	.+22     	; 0x94e <conv_int+0xec>
 938:	c8 01       	movw	r24, r16
 93a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fgetc>
 93e:	97 ff       	sbrs	r25, 7
 940:	dd cf       	rjmp	.-70     	; 0x8fc <conv_int+0x9a>
 942:	c1 fd       	sbrc	r28, 1
 944:	04 c0       	rjmp	.+8      	; 0x94e <conv_int+0xec>
 946:	aa cf       	rjmp	.-172    	; 0x89c <conv_int+0x3a>
 948:	81 2c       	mov	r8, r1
 94a:	91 2c       	mov	r9, r1
 94c:	54 01       	movw	r10, r8
 94e:	c7 ff       	sbrs	r28, 7
 950:	08 c0       	rjmp	.+16     	; 0x962 <conv_int+0x100>
 952:	b0 94       	com	r11
 954:	a0 94       	com	r10
 956:	90 94       	com	r9
 958:	80 94       	com	r8
 95a:	81 1c       	adc	r8, r1
 95c:	91 1c       	adc	r9, r1
 95e:	a1 1c       	adc	r10, r1
 960:	b1 1c       	adc	r11, r1
 962:	2c 2f       	mov	r18, r28
 964:	b5 01       	movw	r22, r10
 966:	a4 01       	movw	r20, r8
 968:	c7 01       	movw	r24, r14
 96a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <putval>
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	df 91       	pop	r29
 972:	cf 91       	pop	r28
 974:	1f 91       	pop	r17
 976:	0f 91       	pop	r16
 978:	ff 90       	pop	r15
 97a:	ef 90       	pop	r14
 97c:	bf 90       	pop	r11
 97e:	af 90       	pop	r10
 980:	9f 90       	pop	r9
 982:	8f 90       	pop	r8
 984:	08 95       	ret

00000986 <conv_brk>:
 986:	a0 e2       	ldi	r26, 0x20	; 32
 988:	b0 e0       	ldi	r27, 0x00	; 0
 98a:	e9 ec       	ldi	r30, 0xC9	; 201
 98c:	f4 e0       	ldi	r31, 0x04	; 4
 98e:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__prologue_saves__+0x6>
 992:	5c 01       	movw	r10, r24
 994:	96 2e       	mov	r9, r22
 996:	7a 01       	movw	r14, r20
 998:	f9 01       	movw	r30, r18
 99a:	8e 01       	movw	r16, r28
 99c:	0f 5f       	subi	r16, 0xFF	; 255
 99e:	1f 4f       	sbci	r17, 0xFF	; 255
 9a0:	68 01       	movw	r12, r16
 9a2:	80 e2       	ldi	r24, 0x20	; 32
 9a4:	d8 01       	movw	r26, r16
 9a6:	1d 92       	st	X+, r1
 9a8:	8a 95       	dec	r24
 9aa:	e9 f7       	brne	.-6      	; 0x9a6 <conv_brk+0x20>
 9ac:	d5 01       	movw	r26, r10
 9ae:	13 96       	adiw	r26, 0x03	; 3
 9b0:	8c 90       	ld	r8, X
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	61 2c       	mov	r6, r1
 9b8:	71 2c       	mov	r7, r1
 9ba:	30 e0       	ldi	r19, 0x00	; 0
 9bc:	61 e0       	ldi	r22, 0x01	; 1
 9be:	70 e0       	ldi	r23, 0x00	; 0
 9c0:	83 fc       	sbrc	r8, 3
 9c2:	25 91       	lpm	r18, Z+
 9c4:	83 fe       	sbrs	r8, 3
 9c6:	21 91       	ld	r18, Z+
 9c8:	8f 01       	movw	r16, r30
 9ca:	52 2e       	mov	r5, r18
 9cc:	21 11       	cpse	r18, r1
 9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <conv_brk+0x50>
 9d0:	80 e0       	ldi	r24, 0x00	; 0
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	92 c0       	rjmp	.+292    	; 0xafa <conv_brk+0x174>
 9d6:	2e 35       	cpi	r18, 0x5E	; 94
 9d8:	11 f4       	brne	.+4      	; 0x9de <conv_brk+0x58>
 9da:	00 97       	sbiw	r24, 0x00	; 0
 9dc:	51 f1       	breq	.+84     	; 0xa32 <conv_brk+0xac>
 9de:	43 2f       	mov	r20, r19
 9e0:	50 e0       	ldi	r21, 0x00	; 0
 9e2:	48 17       	cp	r20, r24
 9e4:	59 07       	cpc	r21, r25
 9e6:	3c f4       	brge	.+14     	; 0x9f6 <conv_brk+0x70>
 9e8:	2d 35       	cpi	r18, 0x5D	; 93
 9ea:	59 f1       	breq	.+86     	; 0xa42 <conv_brk+0xbc>
 9ec:	2d 32       	cpi	r18, 0x2D	; 45
 9ee:	19 f4       	brne	.+6      	; 0x9f6 <conv_brk+0x70>
 9f0:	77 20       	and	r7, r7
 9f2:	09 f1       	breq	.+66     	; 0xa36 <conv_brk+0xb0>
 9f4:	03 c0       	rjmp	.+6      	; 0x9fc <conv_brk+0x76>
 9f6:	77 20       	and	r7, r7
 9f8:	09 f4       	brne	.+2      	; 0x9fc <conv_brk+0x76>
 9fa:	6a c0       	rjmp	.+212    	; 0xad0 <conv_brk+0x14a>
 9fc:	45 2d       	mov	r20, r5
 9fe:	46 95       	lsr	r20
 a00:	46 95       	lsr	r20
 a02:	46 95       	lsr	r20
 a04:	d6 01       	movw	r26, r12
 a06:	a4 0f       	add	r26, r20
 a08:	b1 1d       	adc	r27, r1
 a0a:	45 2d       	mov	r20, r5
 a0c:	47 70       	andi	r20, 0x07	; 7
 a0e:	8b 01       	movw	r16, r22
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <conv_brk+0x90>
 a12:	00 0f       	add	r16, r16
 a14:	11 1f       	adc	r17, r17
 a16:	4a 95       	dec	r20
 a18:	e2 f7       	brpl	.-8      	; 0xa12 <conv_brk+0x8c>
 a1a:	a8 01       	movw	r20, r16
 a1c:	5c 91       	ld	r21, X
 a1e:	45 2b       	or	r20, r21
 a20:	4c 93       	st	X, r20
 a22:	65 14       	cp	r6, r5
 a24:	59 f0       	breq	.+22     	; 0xa3c <conv_brk+0xb6>
 a26:	56 14       	cp	r5, r6
 a28:	10 f4       	brcc	.+4      	; 0xa2e <conv_brk+0xa8>
 a2a:	53 94       	inc	r5
 a2c:	e7 cf       	rjmp	.-50     	; 0x9fc <conv_brk+0x76>
 a2e:	5a 94       	dec	r5
 a30:	e5 cf       	rjmp	.-54     	; 0x9fc <conv_brk+0x76>
 a32:	31 e0       	ldi	r19, 0x01	; 1
 a34:	04 c0       	rjmp	.+8      	; 0xa3e <conv_brk+0xb8>
 a36:	77 24       	eor	r7, r7
 a38:	73 94       	inc	r7
 a3a:	01 c0       	rjmp	.+2      	; 0xa3e <conv_brk+0xb8>
 a3c:	71 2c       	mov	r7, r1
 a3e:	01 96       	adiw	r24, 0x01	; 1
 a40:	bf cf       	rjmp	.-130    	; 0x9c0 <conv_brk+0x3a>
 a42:	77 20       	and	r7, r7
 a44:	19 f0       	breq	.+6      	; 0xa4c <conv_brk+0xc6>
 a46:	8e 81       	ldd	r24, Y+6	; 0x06
 a48:	80 62       	ori	r24, 0x20	; 32
 a4a:	8e 83       	std	Y+6, r24	; 0x06
 a4c:	31 11       	cpse	r19, r1
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <conv_brk+0xd0>
 a50:	88 24       	eor	r8, r8
 a52:	83 94       	inc	r8
 a54:	17 c0       	rjmp	.+46     	; 0xa84 <conv_brk+0xfe>
 a56:	f6 01       	movw	r30, r12
 a58:	9e 01       	movw	r18, r28
 a5a:	2f 5d       	subi	r18, 0xDF	; 223
 a5c:	3f 4f       	sbci	r19, 0xFF	; 255
 a5e:	80 81       	ld	r24, Z
 a60:	80 95       	com	r24
 a62:	81 93       	st	Z+, r24
 a64:	2e 17       	cp	r18, r30
 a66:	3f 07       	cpc	r19, r31
 a68:	d1 f7       	brne	.-12     	; 0xa5e <conv_brk+0xd8>
 a6a:	f2 cf       	rjmp	.-28     	; 0xa50 <conv_brk+0xca>
 a6c:	e1 14       	cp	r14, r1
 a6e:	f1 04       	cpc	r15, r1
 a70:	29 f0       	breq	.+10     	; 0xa7c <conv_brk+0xf6>
 a72:	d7 01       	movw	r26, r14
 a74:	8c 93       	st	X, r24
 a76:	f7 01       	movw	r30, r14
 a78:	31 96       	adiw	r30, 0x01	; 1
 a7a:	7f 01       	movw	r14, r30
 a7c:	9a 94       	dec	r9
 a7e:	81 2c       	mov	r8, r1
 a80:	99 20       	and	r9, r9
 a82:	f9 f0       	breq	.+62     	; 0xac2 <conv_brk+0x13c>
 a84:	c5 01       	movw	r24, r10
 a86:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fgetc>
 a8a:	97 fd       	sbrc	r25, 7
 a8c:	18 c0       	rjmp	.+48     	; 0xabe <conv_brk+0x138>
 a8e:	fc 01       	movw	r30, r24
 a90:	ff 27       	eor	r31, r31
 a92:	23 e0       	ldi	r18, 0x03	; 3
 a94:	f5 95       	asr	r31
 a96:	e7 95       	ror	r30
 a98:	2a 95       	dec	r18
 a9a:	e1 f7       	brne	.-8      	; 0xa94 <conv_brk+0x10e>
 a9c:	ec 0d       	add	r30, r12
 a9e:	fd 1d       	adc	r31, r13
 aa0:	20 81       	ld	r18, Z
 aa2:	30 e0       	ldi	r19, 0x00	; 0
 aa4:	ac 01       	movw	r20, r24
 aa6:	47 70       	andi	r20, 0x07	; 7
 aa8:	55 27       	eor	r21, r21
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <conv_brk+0x12a>
 aac:	35 95       	asr	r19
 aae:	27 95       	ror	r18
 ab0:	4a 95       	dec	r20
 ab2:	e2 f7       	brpl	.-8      	; 0xaac <conv_brk+0x126>
 ab4:	20 fd       	sbrc	r18, 0
 ab6:	da cf       	rjmp	.-76     	; 0xa6c <conv_brk+0xe6>
 ab8:	b5 01       	movw	r22, r10
 aba:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <ungetc>
 abe:	81 10       	cpse	r8, r1
 ac0:	87 cf       	rjmp	.-242    	; 0x9d0 <conv_brk+0x4a>
 ac2:	e1 14       	cp	r14, r1
 ac4:	f1 04       	cpc	r15, r1
 ac6:	11 f0       	breq	.+4      	; 0xacc <conv_brk+0x146>
 ac8:	d7 01       	movw	r26, r14
 aca:	1c 92       	st	X, r1
 acc:	c8 01       	movw	r24, r16
 ace:	15 c0       	rjmp	.+42     	; 0xafa <conv_brk+0x174>
 ad0:	42 2f       	mov	r20, r18
 ad2:	46 95       	lsr	r20
 ad4:	46 95       	lsr	r20
 ad6:	46 95       	lsr	r20
 ad8:	d6 01       	movw	r26, r12
 ada:	a4 0f       	add	r26, r20
 adc:	b1 1d       	adc	r27, r1
 ade:	42 2f       	mov	r20, r18
 ae0:	47 70       	andi	r20, 0x07	; 7
 ae2:	8b 01       	movw	r16, r22
 ae4:	02 c0       	rjmp	.+4      	; 0xaea <conv_brk+0x164>
 ae6:	00 0f       	add	r16, r16
 ae8:	11 1f       	adc	r17, r17
 aea:	4a 95       	dec	r20
 aec:	e2 f7       	brpl	.-8      	; 0xae6 <conv_brk+0x160>
 aee:	a8 01       	movw	r20, r16
 af0:	5c 91       	ld	r21, X
 af2:	45 2b       	or	r20, r21
 af4:	4c 93       	st	X, r20
 af6:	62 2e       	mov	r6, r18
 af8:	a2 cf       	rjmp	.-188    	; 0xa3e <conv_brk+0xb8>
 afa:	a0 96       	adiw	r28, 0x20	; 32
 afc:	ef e0       	ldi	r30, 0x0F	; 15
 afe:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__epilogue_restores__+0x6>

00000b02 <vfscanf>:
 b02:	a0 e0       	ldi	r26, 0x00	; 0
 b04:	b0 e0       	ldi	r27, 0x00	; 0
 b06:	e7 e8       	ldi	r30, 0x87	; 135
 b08:	f5 e0       	ldi	r31, 0x05	; 5
 b0a:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__prologue_saves__+0x6>
 b0e:	6c 01       	movw	r12, r24
 b10:	eb 01       	movw	r28, r22
 b12:	5a 01       	movw	r10, r20
 b14:	fc 01       	movw	r30, r24
 b16:	17 82       	std	Z+7, r1	; 0x07
 b18:	16 82       	std	Z+6, r1	; 0x06
 b1a:	51 2c       	mov	r5, r1
 b1c:	f6 01       	movw	r30, r12
 b1e:	e3 80       	ldd	r14, Z+3	; 0x03
 b20:	fe 01       	movw	r30, r28
 b22:	e3 fc       	sbrc	r14, 3
 b24:	85 91       	lpm	r24, Z+
 b26:	e3 fe       	sbrs	r14, 3
 b28:	81 91       	ld	r24, Z+
 b2a:	18 2f       	mov	r17, r24
 b2c:	ef 01       	movw	r28, r30
 b2e:	88 23       	and	r24, r24
 b30:	09 f4       	brne	.+2      	; 0xb34 <vfscanf+0x32>
 b32:	ee c0       	rjmp	.+476    	; 0xd10 <vfscanf+0x20e>
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	0e 94 92 06 	call	0xd24	; 0xd24 <isspace>
 b3a:	89 2b       	or	r24, r25
 b3c:	21 f0       	breq	.+8      	; 0xb46 <vfscanf+0x44>
 b3e:	c6 01       	movw	r24, r12
 b40:	0e 94 18 04 	call	0x830	; 0x830 <skip_spaces>
 b44:	eb cf       	rjmp	.-42     	; 0xb1c <vfscanf+0x1a>
 b46:	15 32       	cpi	r17, 0x25	; 37
 b48:	41 f4       	brne	.+16     	; 0xb5a <vfscanf+0x58>
 b4a:	fe 01       	movw	r30, r28
 b4c:	e3 fc       	sbrc	r14, 3
 b4e:	15 91       	lpm	r17, Z+
 b50:	e3 fe       	sbrs	r14, 3
 b52:	11 91       	ld	r17, Z+
 b54:	ef 01       	movw	r28, r30
 b56:	15 32       	cpi	r17, 0x25	; 37
 b58:	81 f4       	brne	.+32     	; 0xb7a <vfscanf+0x78>
 b5a:	c6 01       	movw	r24, r12
 b5c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fgetc>
 b60:	97 fd       	sbrc	r25, 7
 b62:	d4 c0       	rjmp	.+424    	; 0xd0c <vfscanf+0x20a>
 b64:	41 2f       	mov	r20, r17
 b66:	50 e0       	ldi	r21, 0x00	; 0
 b68:	9c 01       	movw	r18, r24
 b6a:	33 27       	eor	r19, r19
 b6c:	24 17       	cp	r18, r20
 b6e:	35 07       	cpc	r19, r21
 b70:	a9 f2       	breq	.-86     	; 0xb1c <vfscanf+0x1a>
 b72:	b6 01       	movw	r22, r12
 b74:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <ungetc>
 b78:	cb c0       	rjmp	.+406    	; 0xd10 <vfscanf+0x20e>
 b7a:	1a 32       	cpi	r17, 0x2A	; 42
 b7c:	39 f4       	brne	.+14     	; 0xb8c <vfscanf+0x8a>
 b7e:	e3 fc       	sbrc	r14, 3
 b80:	15 91       	lpm	r17, Z+
 b82:	e3 fe       	sbrs	r14, 3
 b84:	11 91       	ld	r17, Z+
 b86:	ef 01       	movw	r28, r30
 b88:	01 e0       	ldi	r16, 0x01	; 1
 b8a:	01 c0       	rjmp	.+2      	; 0xb8e <vfscanf+0x8c>
 b8c:	00 e0       	ldi	r16, 0x00	; 0
 b8e:	f1 2c       	mov	r15, r1
 b90:	20 ed       	ldi	r18, 0xD0	; 208
 b92:	21 0f       	add	r18, r17
 b94:	2a 30       	cpi	r18, 0x0A	; 10
 b96:	80 f4       	brcc	.+32     	; 0xbb8 <vfscanf+0xb6>
 b98:	02 60       	ori	r16, 0x02	; 2
 b9a:	6f 2d       	mov	r22, r15
 b9c:	70 e0       	ldi	r23, 0x00	; 0
 b9e:	80 e0       	ldi	r24, 0x00	; 0
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	40 e2       	ldi	r20, 0x20	; 32
 ba4:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <mulacc>
 ba8:	f6 2e       	mov	r15, r22
 baa:	fe 01       	movw	r30, r28
 bac:	e3 fc       	sbrc	r14, 3
 bae:	15 91       	lpm	r17, Z+
 bb0:	e3 fe       	sbrs	r14, 3
 bb2:	11 91       	ld	r17, Z+
 bb4:	ef 01       	movw	r28, r30
 bb6:	ec cf       	rjmp	.-40     	; 0xb90 <vfscanf+0x8e>
 bb8:	01 ff       	sbrs	r16, 1
 bba:	03 c0       	rjmp	.+6      	; 0xbc2 <vfscanf+0xc0>
 bbc:	f1 10       	cpse	r15, r1
 bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <vfscanf+0xc4>
 bc0:	a7 c0       	rjmp	.+334    	; 0xd10 <vfscanf+0x20e>
 bc2:	ff 24       	eor	r15, r15
 bc4:	fa 94       	dec	r15
 bc6:	18 36       	cpi	r17, 0x68	; 104
 bc8:	19 f0       	breq	.+6      	; 0xbd0 <vfscanf+0xce>
 bca:	1c 36       	cpi	r17, 0x6C	; 108
 bcc:	51 f0       	breq	.+20     	; 0xbe2 <vfscanf+0xe0>
 bce:	10 c0       	rjmp	.+32     	; 0xbf0 <vfscanf+0xee>
 bd0:	fe 01       	movw	r30, r28
 bd2:	e3 fc       	sbrc	r14, 3
 bd4:	15 91       	lpm	r17, Z+
 bd6:	e3 fe       	sbrs	r14, 3
 bd8:	11 91       	ld	r17, Z+
 bda:	ef 01       	movw	r28, r30
 bdc:	18 36       	cpi	r17, 0x68	; 104
 bde:	41 f4       	brne	.+16     	; 0xbf0 <vfscanf+0xee>
 be0:	08 60       	ori	r16, 0x08	; 8
 be2:	04 60       	ori	r16, 0x04	; 4
 be4:	fe 01       	movw	r30, r28
 be6:	e3 fc       	sbrc	r14, 3
 be8:	15 91       	lpm	r17, Z+
 bea:	e3 fe       	sbrs	r14, 3
 bec:	11 91       	ld	r17, Z+
 bee:	ef 01       	movw	r28, r30
 bf0:	11 23       	and	r17, r17
 bf2:	09 f4       	brne	.+2      	; 0xbf6 <vfscanf+0xf4>
 bf4:	8d c0       	rjmp	.+282    	; 0xd10 <vfscanf+0x20e>
 bf6:	61 2f       	mov	r22, r17
 bf8:	70 e0       	ldi	r23, 0x00	; 0
 bfa:	84 e5       	ldi	r24, 0x54	; 84
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	0e 94 9b 06 	call	0xd36	; 0xd36 <strchr_P>
 c02:	89 2b       	or	r24, r25
 c04:	09 f4       	brne	.+2      	; 0xc08 <vfscanf+0x106>
 c06:	84 c0       	rjmp	.+264    	; 0xd10 <vfscanf+0x20e>
 c08:	00 fd       	sbrc	r16, 0
 c0a:	07 c0       	rjmp	.+14     	; 0xc1a <vfscanf+0x118>
 c0c:	f5 01       	movw	r30, r10
 c0e:	80 80       	ld	r8, Z
 c10:	91 80       	ldd	r9, Z+1	; 0x01
 c12:	c5 01       	movw	r24, r10
 c14:	02 96       	adiw	r24, 0x02	; 2
 c16:	5c 01       	movw	r10, r24
 c18:	02 c0       	rjmp	.+4      	; 0xc1e <vfscanf+0x11c>
 c1a:	81 2c       	mov	r8, r1
 c1c:	91 2c       	mov	r9, r1
 c1e:	1e 36       	cpi	r17, 0x6E	; 110
 c20:	51 f4       	brne	.+20     	; 0xc36 <vfscanf+0x134>
 c22:	f6 01       	movw	r30, r12
 c24:	46 81       	ldd	r20, Z+6	; 0x06
 c26:	57 81       	ldd	r21, Z+7	; 0x07
 c28:	60 e0       	ldi	r22, 0x00	; 0
 c2a:	70 e0       	ldi	r23, 0x00	; 0
 c2c:	20 2f       	mov	r18, r16
 c2e:	c4 01       	movw	r24, r8
 c30:	0e 94 e5 03 	call	0x7ca	; 0x7ca <putval>
 c34:	73 cf       	rjmp	.-282    	; 0xb1c <vfscanf+0x1a>
 c36:	13 36       	cpi	r17, 0x63	; 99
 c38:	a9 f4       	brne	.+42     	; 0xc64 <vfscanf+0x162>
 c3a:	01 fd       	sbrc	r16, 1
 c3c:	02 c0       	rjmp	.+4      	; 0xc42 <vfscanf+0x140>
 c3e:	ff 24       	eor	r15, r15
 c40:	f3 94       	inc	r15
 c42:	c6 01       	movw	r24, r12
 c44:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fgetc>
 c48:	97 fd       	sbrc	r25, 7
 c4a:	60 c0       	rjmp	.+192    	; 0xd0c <vfscanf+0x20a>
 c4c:	81 14       	cp	r8, r1
 c4e:	91 04       	cpc	r9, r1
 c50:	29 f0       	breq	.+10     	; 0xc5c <vfscanf+0x15a>
 c52:	f4 01       	movw	r30, r8
 c54:	80 83       	st	Z, r24
 c56:	c4 01       	movw	r24, r8
 c58:	01 96       	adiw	r24, 0x01	; 1
 c5a:	4c 01       	movw	r8, r24
 c5c:	fa 94       	dec	r15
 c5e:	f1 10       	cpse	r15, r1
 c60:	f0 cf       	rjmp	.-32     	; 0xc42 <vfscanf+0x140>
 c62:	50 c0       	rjmp	.+160    	; 0xd04 <vfscanf+0x202>
 c64:	1b 35       	cpi	r17, 0x5B	; 91
 c66:	59 f4       	brne	.+22     	; 0xc7e <vfscanf+0x17c>
 c68:	9e 01       	movw	r18, r28
 c6a:	a4 01       	movw	r20, r8
 c6c:	6f 2d       	mov	r22, r15
 c6e:	c6 01       	movw	r24, r12
 c70:	0e 94 c3 04 	call	0x986	; 0x986 <conv_brk>
 c74:	ec 01       	movw	r28, r24
 c76:	89 2b       	or	r24, r25
 c78:	09 f0       	breq	.+2      	; 0xc7c <vfscanf+0x17a>
 c7a:	44 c0       	rjmp	.+136    	; 0xd04 <vfscanf+0x202>
 c7c:	3e c0       	rjmp	.+124    	; 0xcfa <vfscanf+0x1f8>
 c7e:	c6 01       	movw	r24, r12
 c80:	0e 94 18 04 	call	0x830	; 0x830 <skip_spaces>
 c84:	97 fd       	sbrc	r25, 7
 c86:	42 c0       	rjmp	.+132    	; 0xd0c <vfscanf+0x20a>
 c88:	1f 36       	cpi	r17, 0x6F	; 111
 c8a:	61 f1       	breq	.+88     	; 0xce4 <vfscanf+0x1e2>
 c8c:	28 f4       	brcc	.+10     	; 0xc98 <vfscanf+0x196>
 c8e:	14 36       	cpi	r17, 0x64	; 100
 c90:	39 f1       	breq	.+78     	; 0xce0 <vfscanf+0x1de>
 c92:	19 36       	cpi	r17, 0x69	; 105
 c94:	51 f1       	breq	.+84     	; 0xcea <vfscanf+0x1e8>
 c96:	28 c0       	rjmp	.+80     	; 0xce8 <vfscanf+0x1e6>
 c98:	13 37       	cpi	r17, 0x73	; 115
 c9a:	71 f0       	breq	.+28     	; 0xcb8 <vfscanf+0x1b6>
 c9c:	15 37       	cpi	r17, 0x75	; 117
 c9e:	01 f1       	breq	.+64     	; 0xce0 <vfscanf+0x1de>
 ca0:	23 c0       	rjmp	.+70     	; 0xce8 <vfscanf+0x1e6>
 ca2:	81 14       	cp	r8, r1
 ca4:	91 04       	cpc	r9, r1
 ca6:	29 f0       	breq	.+10     	; 0xcb2 <vfscanf+0x1b0>
 ca8:	f4 01       	movw	r30, r8
 caa:	60 82       	st	Z, r6
 cac:	c4 01       	movw	r24, r8
 cae:	01 96       	adiw	r24, 0x01	; 1
 cb0:	4c 01       	movw	r8, r24
 cb2:	fa 94       	dec	r15
 cb4:	ff 20       	and	r15, r15
 cb6:	71 f0       	breq	.+28     	; 0xcd4 <vfscanf+0x1d2>
 cb8:	c6 01       	movw	r24, r12
 cba:	0e 94 a6 06 	call	0xd4c	; 0xd4c <fgetc>
 cbe:	3c 01       	movw	r6, r24
 cc0:	97 fd       	sbrc	r25, 7
 cc2:	08 c0       	rjmp	.+16     	; 0xcd4 <vfscanf+0x1d2>
 cc4:	0e 94 92 06 	call	0xd24	; 0xd24 <isspace>
 cc8:	89 2b       	or	r24, r25
 cca:	59 f3       	breq	.-42     	; 0xca2 <vfscanf+0x1a0>
 ccc:	b6 01       	movw	r22, r12
 cce:	c3 01       	movw	r24, r6
 cd0:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <ungetc>
 cd4:	81 14       	cp	r8, r1
 cd6:	91 04       	cpc	r9, r1
 cd8:	a9 f0       	breq	.+42     	; 0xd04 <vfscanf+0x202>
 cda:	f4 01       	movw	r30, r8
 cdc:	10 82       	st	Z, r1
 cde:	12 c0       	rjmp	.+36     	; 0xd04 <vfscanf+0x202>
 ce0:	00 62       	ori	r16, 0x20	; 32
 ce2:	03 c0       	rjmp	.+6      	; 0xcea <vfscanf+0x1e8>
 ce4:	00 61       	ori	r16, 0x10	; 16
 ce6:	01 c0       	rjmp	.+2      	; 0xcea <vfscanf+0x1e8>
 ce8:	00 64       	ori	r16, 0x40	; 64
 cea:	20 2f       	mov	r18, r16
 cec:	a4 01       	movw	r20, r8
 cee:	6f 2d       	mov	r22, r15
 cf0:	c6 01       	movw	r24, r12
 cf2:	0e 94 31 04 	call	0x862	; 0x862 <conv_int>
 cf6:	81 11       	cpse	r24, r1
 cf8:	05 c0       	rjmp	.+10     	; 0xd04 <vfscanf+0x202>
 cfa:	f6 01       	movw	r30, r12
 cfc:	83 81       	ldd	r24, Z+3	; 0x03
 cfe:	80 73       	andi	r24, 0x30	; 48
 d00:	29 f4       	brne	.+10     	; 0xd0c <vfscanf+0x20a>
 d02:	06 c0       	rjmp	.+12     	; 0xd10 <vfscanf+0x20e>
 d04:	00 fd       	sbrc	r16, 0
 d06:	0a cf       	rjmp	.-492    	; 0xb1c <vfscanf+0x1a>
 d08:	53 94       	inc	r5
 d0a:	08 cf       	rjmp	.-496    	; 0xb1c <vfscanf+0x1a>
 d0c:	55 20       	and	r5, r5
 d0e:	19 f0       	breq	.+6      	; 0xd16 <vfscanf+0x214>
 d10:	85 2d       	mov	r24, r5
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	02 c0       	rjmp	.+4      	; 0xd1a <vfscanf+0x218>
 d16:	8f ef       	ldi	r24, 0xFF	; 255
 d18:	9f ef       	ldi	r25, 0xFF	; 255
 d1a:	cd b7       	in	r28, 0x3d	; 61
 d1c:	de b7       	in	r29, 0x3e	; 62
 d1e:	ef e0       	ldi	r30, 0x0F	; 15
 d20:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__epilogue_restores__+0x6>

00000d24 <isspace>:
 d24:	91 11       	cpse	r25, r1
 d26:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <__ctype_isfalse>
 d2a:	80 32       	cpi	r24, 0x20	; 32
 d2c:	19 f0       	breq	.+6      	; 0xd34 <isspace+0x10>
 d2e:	89 50       	subi	r24, 0x09	; 9
 d30:	85 50       	subi	r24, 0x05	; 5
 d32:	c8 f7       	brcc	.-14     	; 0xd26 <isspace+0x2>
 d34:	08 95       	ret

00000d36 <strchr_P>:
 d36:	fc 01       	movw	r30, r24
 d38:	05 90       	lpm	r0, Z+
 d3a:	06 16       	cp	r0, r22
 d3c:	21 f0       	breq	.+8      	; 0xd46 <strchr_P+0x10>
 d3e:	00 20       	and	r0, r0
 d40:	d9 f7       	brne	.-10     	; 0xd38 <strchr_P+0x2>
 d42:	c0 01       	movw	r24, r0
 d44:	08 95       	ret
 d46:	31 97       	sbiw	r30, 0x01	; 1
 d48:	cf 01       	movw	r24, r30
 d4a:	08 95       	ret

00000d4c <fgetc>:
 d4c:	cf 93       	push	r28
 d4e:	df 93       	push	r29
 d50:	ec 01       	movw	r28, r24
 d52:	2b 81       	ldd	r18, Y+3	; 0x03
 d54:	20 ff       	sbrs	r18, 0
 d56:	33 c0       	rjmp	.+102    	; 0xdbe <fgetc+0x72>
 d58:	26 ff       	sbrs	r18, 6
 d5a:	0a c0       	rjmp	.+20     	; 0xd70 <fgetc+0x24>
 d5c:	2f 7b       	andi	r18, 0xBF	; 191
 d5e:	2b 83       	std	Y+3, r18	; 0x03
 d60:	8e 81       	ldd	r24, Y+6	; 0x06
 d62:	9f 81       	ldd	r25, Y+7	; 0x07
 d64:	01 96       	adiw	r24, 0x01	; 1
 d66:	9f 83       	std	Y+7, r25	; 0x07
 d68:	8e 83       	std	Y+6, r24	; 0x06
 d6a:	8a 81       	ldd	r24, Y+2	; 0x02
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	29 c0       	rjmp	.+82     	; 0xdc2 <fgetc+0x76>
 d70:	22 ff       	sbrs	r18, 2
 d72:	0f c0       	rjmp	.+30     	; 0xd92 <fgetc+0x46>
 d74:	e8 81       	ld	r30, Y
 d76:	f9 81       	ldd	r31, Y+1	; 0x01
 d78:	80 81       	ld	r24, Z
 d7a:	08 2e       	mov	r0, r24
 d7c:	00 0c       	add	r0, r0
 d7e:	99 0b       	sbc	r25, r25
 d80:	00 97       	sbiw	r24, 0x00	; 0
 d82:	19 f4       	brne	.+6      	; 0xd8a <fgetc+0x3e>
 d84:	20 62       	ori	r18, 0x20	; 32
 d86:	2b 83       	std	Y+3, r18	; 0x03
 d88:	1a c0       	rjmp	.+52     	; 0xdbe <fgetc+0x72>
 d8a:	31 96       	adiw	r30, 0x01	; 1
 d8c:	f9 83       	std	Y+1, r31	; 0x01
 d8e:	e8 83       	st	Y, r30
 d90:	0e c0       	rjmp	.+28     	; 0xdae <fgetc+0x62>
 d92:	ea 85       	ldd	r30, Y+10	; 0x0a
 d94:	fb 85       	ldd	r31, Y+11	; 0x0b
 d96:	09 95       	icall
 d98:	97 ff       	sbrs	r25, 7
 d9a:	09 c0       	rjmp	.+18     	; 0xdae <fgetc+0x62>
 d9c:	2b 81       	ldd	r18, Y+3	; 0x03
 d9e:	01 96       	adiw	r24, 0x01	; 1
 da0:	11 f0       	breq	.+4      	; 0xda6 <fgetc+0x5a>
 da2:	80 e2       	ldi	r24, 0x20	; 32
 da4:	01 c0       	rjmp	.+2      	; 0xda8 <fgetc+0x5c>
 da6:	80 e1       	ldi	r24, 0x10	; 16
 da8:	82 2b       	or	r24, r18
 daa:	8b 83       	std	Y+3, r24	; 0x03
 dac:	08 c0       	rjmp	.+16     	; 0xdbe <fgetc+0x72>
 dae:	2e 81       	ldd	r18, Y+6	; 0x06
 db0:	3f 81       	ldd	r19, Y+7	; 0x07
 db2:	2f 5f       	subi	r18, 0xFF	; 255
 db4:	3f 4f       	sbci	r19, 0xFF	; 255
 db6:	3f 83       	std	Y+7, r19	; 0x07
 db8:	2e 83       	std	Y+6, r18	; 0x06
 dba:	99 27       	eor	r25, r25
 dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <fgetc+0x76>
 dbe:	8f ef       	ldi	r24, 0xFF	; 255
 dc0:	9f ef       	ldi	r25, 0xFF	; 255
 dc2:	df 91       	pop	r29
 dc4:	cf 91       	pop	r28
 dc6:	08 95       	ret

00000dc8 <ungetc>:
 dc8:	fb 01       	movw	r30, r22
 dca:	23 81       	ldd	r18, Z+3	; 0x03
 dcc:	20 ff       	sbrs	r18, 0
 dce:	12 c0       	rjmp	.+36     	; 0xdf4 <ungetc+0x2c>
 dd0:	26 fd       	sbrc	r18, 6
 dd2:	10 c0       	rjmp	.+32     	; 0xdf4 <ungetc+0x2c>
 dd4:	8f 3f       	cpi	r24, 0xFF	; 255
 dd6:	3f ef       	ldi	r19, 0xFF	; 255
 dd8:	93 07       	cpc	r25, r19
 dda:	61 f0       	breq	.+24     	; 0xdf4 <ungetc+0x2c>
 ddc:	82 83       	std	Z+2, r24	; 0x02
 dde:	2f 7d       	andi	r18, 0xDF	; 223
 de0:	20 64       	ori	r18, 0x40	; 64
 de2:	23 83       	std	Z+3, r18	; 0x03
 de4:	26 81       	ldd	r18, Z+6	; 0x06
 de6:	37 81       	ldd	r19, Z+7	; 0x07
 de8:	21 50       	subi	r18, 0x01	; 1
 dea:	31 09       	sbc	r19, r1
 dec:	37 83       	std	Z+7, r19	; 0x07
 dee:	26 83       	std	Z+6, r18	; 0x06
 df0:	99 27       	eor	r25, r25
 df2:	08 95       	ret
 df4:	8f ef       	ldi	r24, 0xFF	; 255
 df6:	9f ef       	ldi	r25, 0xFF	; 255
 df8:	08 95       	ret

00000dfa <__ctype_isfalse>:
 dfa:	99 27       	eor	r25, r25
 dfc:	88 27       	eor	r24, r24

00000dfe <__ctype_istrue>:
 dfe:	08 95       	ret

00000e00 <__prologue_saves__>:
 e00:	2f 92       	push	r2
 e02:	3f 92       	push	r3
 e04:	4f 92       	push	r4
 e06:	5f 92       	push	r5
 e08:	6f 92       	push	r6
 e0a:	7f 92       	push	r7
 e0c:	8f 92       	push	r8
 e0e:	9f 92       	push	r9
 e10:	af 92       	push	r10
 e12:	bf 92       	push	r11
 e14:	cf 92       	push	r12
 e16:	df 92       	push	r13
 e18:	ef 92       	push	r14
 e1a:	ff 92       	push	r15
 e1c:	0f 93       	push	r16
 e1e:	1f 93       	push	r17
 e20:	cf 93       	push	r28
 e22:	df 93       	push	r29
 e24:	cd b7       	in	r28, 0x3d	; 61
 e26:	de b7       	in	r29, 0x3e	; 62
 e28:	ca 1b       	sub	r28, r26
 e2a:	db 0b       	sbc	r29, r27
 e2c:	0f b6       	in	r0, 0x3f	; 63
 e2e:	f8 94       	cli
 e30:	de bf       	out	0x3e, r29	; 62
 e32:	0f be       	out	0x3f, r0	; 63
 e34:	cd bf       	out	0x3d, r28	; 61
 e36:	09 94       	ijmp

00000e38 <__epilogue_restores__>:
 e38:	2a 88       	ldd	r2, Y+18	; 0x12
 e3a:	39 88       	ldd	r3, Y+17	; 0x11
 e3c:	48 88       	ldd	r4, Y+16	; 0x10
 e3e:	5f 84       	ldd	r5, Y+15	; 0x0f
 e40:	6e 84       	ldd	r6, Y+14	; 0x0e
 e42:	7d 84       	ldd	r7, Y+13	; 0x0d
 e44:	8c 84       	ldd	r8, Y+12	; 0x0c
 e46:	9b 84       	ldd	r9, Y+11	; 0x0b
 e48:	aa 84       	ldd	r10, Y+10	; 0x0a
 e4a:	b9 84       	ldd	r11, Y+9	; 0x09
 e4c:	c8 84       	ldd	r12, Y+8	; 0x08
 e4e:	df 80       	ldd	r13, Y+7	; 0x07
 e50:	ee 80       	ldd	r14, Y+6	; 0x06
 e52:	fd 80       	ldd	r15, Y+5	; 0x05
 e54:	0c 81       	ldd	r16, Y+4	; 0x04
 e56:	1b 81       	ldd	r17, Y+3	; 0x03
 e58:	aa 81       	ldd	r26, Y+2	; 0x02
 e5a:	b9 81       	ldd	r27, Y+1	; 0x01
 e5c:	ce 0f       	add	r28, r30
 e5e:	d1 1d       	adc	r29, r1
 e60:	0f b6       	in	r0, 0x3f	; 63
 e62:	f8 94       	cli
 e64:	de bf       	out	0x3e, r29	; 62
 e66:	0f be       	out	0x3f, r0	; 63
 e68:	cd bf       	out	0x3d, r28	; 61
 e6a:	ed 01       	movw	r28, r26
 e6c:	08 95       	ret

00000e6e <_exit>:
 e6e:	f8 94       	cli

00000e70 <__stop_program>:
 e70:	ff cf       	rjmp	.-2      	; 0xe70 <__stop_program>
